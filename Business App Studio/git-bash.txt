//Setting up user name
git config --global user.name "ssurampally"

//Setting up the user email
git config --global user.email "<email ID>"
---------------------------------
---------------------------------------------------

//-- list out the files in the directory -- Widows type of command
user: user $ dir
result: node_modules  projects  tmp

// chanage the directory 
user: user $ cd projects

//almost similar to dir
user: projects $ ls
hc2022  hc2022Q1

// to show hidden files also
  ls -a
  
 // to create a new file in home directory. ~ represents home directory.
 touch ~/
 
// example: touch ~/.profile.  //here .profile is a system file that will be hidden by default. 
 //for ZSH terminal : ~/.zshrc is the system file that needs to be created in Mac/ Unix.

-------------------------------------------------
// Run the Status command to review recent updates to the repository
Git Status

// Get the log of all changes and commits to the repo
 Git log

---------------------------------
// initialize the repository - Navigate to the home folder of the project run Git init. This adds .git file and start tracking changes.
git init

// adding folder files to the repository tracking - Staging
git add .

// add only specific files to tracking - Staging
---------------------------
git add <filename>

// Commit the files to Local Repo
git commit -m "<Commit message>

//make sure git main branch is checked out in local
git branch -M main

// Check git status and git log 
------------------------------------------
// Sync the local changes with remote
// Create a remote branch for local
git remote add origin <clone url>

//Token
<Token generated in Github>

// Push the changes to remote repo
git push origin main

-------------------------------
//fetch and pull
git fetch origin main

if you don't specify the branch name, then all branches updated.

------------------
//clean up remote origin from the Git local
git remote remove origin

-------------------------------------
//Create and checkout to new branch
git checkout -b dev

-----------------------------------------------------

// to remove last commit from local
git reset --hard 57c5ce6b766550bda8d74ecaa44fc2fb15f64458
----------------------------
// remove the initialization of repository
rm -rf .git

-------------------------------------
// to remove a directory
user: projects $ rmdir hc2022
rmdir: failed to remove 'hc2022': Directory not empty

//to remove a diretory that is not empty
user: projects $ rm -rf hc2022

// go to home directory
 cd ~
 
------------------------------------------------ 
-----------------------------------------------
Part 2: Git Branches

// List all the branches in the repo
git branch -a

// creating a new branch
git branch dev

// rename a branch
git branch -m dev development

// delete a branch
git branch -d dev

// to check branch pointer
git log
----------------------------
//fastforward merge

//creating a dev branch - make changes in that and commit
// Switch to master branch then merge from dev branch local
 
git merge dev
with that your local master will move to the commit which your local dev is on.

// 3 way merge
// making changes in both branches (without a confict)
//checkout to master then merge from dev branch -- same syntax as above.


----------------------------------------------------
// perform the merge from a remote branch, 
//it is important to get the changes to local first in order to push to remote.
// 3 options we can pull  or fetch + merge   or Rebase

git fetch -all 
//check out to the local branch that you wanted to get the changes in
git merge origin/master
// with that your local branch  gets all the commits from remote master.

// you can do this by writing  just one statement pull
git pull origin/master

// rebase from remote branch
// if you do want the history you can completely rebase your local to remote master branch
git rebase origin/master


----------------------------------
------------------------------
Part 3: resolve merge conflicts





//Cloud foundry commands
cf login

//displaying cf services
cf services

//target prod space
cf target -s prod

//deploy MTAR file  -- Right click on the MTAR file to get the file path and paste it.
cf deploy <full-path-directory of the MTAR file>




